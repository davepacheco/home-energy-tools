/*
 * The Enlighten Systems API
 *
 * The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SystemsResponseSystems {
    /// The Enlighten ID of the system.
    #[serde(rename = "system_id")]
    pub system_id: i32,
    /// The name of the system. Even if the system owner has indicated their site is anonymous for public lists, the actual system name is returned here for identification purposes.
    #[serde(rename = "system_name")]
    pub system_name: String,
    /// The display name of the system. Use this when displaying the system name on a public list or view.
    #[serde(rename = "system_public_name")]
    pub system_public_name: String,
    /// If the calling user belongs to a company and that company has provided its own identifiers for a system, that ID is included here. Otherwise, this attribute is not returned.
    #[serde(rename = "reference", skip_serializing_if = "Option::is_none")]
    pub reference: Option<String>,
    /// If any other companies have provided their own identifiers for a system, those identifiers are included here. Otherwise, this attribute is not returned.
    #[serde(rename = "other_references", skip_serializing_if = "Option::is_none")]
    pub other_references: Option<Vec<String>>,
    /// The two-letter code for the country where the system is located. See [ISO_3166-1_alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) for reference.
    #[serde(rename = "country")]
    pub country: String,
    /// The two-letter code for the state where the system is located. See [ISO_3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) for reference.
    #[serde(rename = "state")]
    pub state: String,
    /// The name of the city where the system is located.
    #[serde(rename = "city")]
    pub city: String,
    /// The postal code where the system is located.
    #[serde(rename = "postal_code")]
    pub postal_code: String,
    /// The timezone of the system.
    #[serde(rename = "timezone")]
    pub timezone: String,
    #[serde(rename = "connection_type")]
    pub connection_type: crate::models::ConnectionType,
    /// The current status of the system. You can find this and more in the `meta` property.
    #[serde(rename = "status")]
    pub status: Status,
    #[serde(rename = "meta")]
    pub meta: Box<crate::models::Meta>,
}

impl SystemsResponseSystems {
    pub fn new(system_id: i32, system_name: String, system_public_name: String, country: String, state: String, city: String, postal_code: String, timezone: String, connection_type: crate::models::ConnectionType, status: Status, meta: crate::models::Meta) -> SystemsResponseSystems {
        SystemsResponseSystems {
            system_id,
            system_name,
            system_public_name,
            reference: None,
            other_references: None,
            country,
            state,
            city,
            postal_code,
            timezone,
            connection_type,
            status,
            meta: Box::new(meta),
        }
    }
}

/// The current status of the system. You can find this and more in the `meta` property.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "comm")]
    Comm,
    #[serde(rename = "power")]
    Power,
    #[serde(rename = "meter")]
    Meter,
    #[serde(rename = "meter_issue")]
    MeterIssue,
    #[serde(rename = "micro")]
    Micro,
    #[serde(rename = "battery")]
    Battery,
    #[serde(rename = "storage_idle")]
    StorageIdle,
    #[serde(rename = "normal")]
    Normal,
}

