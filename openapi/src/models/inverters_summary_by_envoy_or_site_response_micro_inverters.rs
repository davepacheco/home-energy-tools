/*
 * The Enlighten Systems API
 *
 * The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct InvertersSummaryByEnvoyOrSiteResponseMicroInverters {
    #[serde(rename = "id")]
    pub id: i32,
    /// Model number of this Microinverter.
    #[serde(rename = "model")]
    pub model: String,
    /// The Enphase part number of this Microinverter.
    #[serde(rename = "part_number")]
    pub part_number: String,
    /// The serial number of this Microinverter.
    #[serde(rename = "serial_number")]
    pub serial_number: String,
    #[serde(rename = "sku")]
    pub sku: String,
    /// The current status of this Microinverter. * `normal` - The microinverter is operating normally. * `power` - There is a production issue. * `micro` - The microinverter is not reporting. * `retired` - The microinverter is retired.
    #[serde(rename = "status")]
    pub status: Status,
    #[serde(rename = "power_produced")]
    pub power_produced: i32,
    #[serde(rename = "proc_load")]
    pub proc_load: String,
    #[serde(rename = "param_table")]
    pub param_table: String,
    #[serde(rename = "envoy_serial_number")]
    pub envoy_serial_number: String,
    #[serde(rename = "energy")]
    pub energy: Box<crate::models::InvertersSummaryByEnvoyOrSiteResponseEnergy>,
    #[serde(rename = "grid_profile")]
    pub grid_profile: String,
    /// The last time this device submitted a report, by default expressed in Unix epoch time. If Enlighten has no record of a report from this Envoy, returns null.
    #[serde(rename = "last_report_date")]
    pub last_report_date: String,
}

impl InvertersSummaryByEnvoyOrSiteResponseMicroInverters {
    pub fn new(id: i32, model: String, part_number: String, serial_number: String, sku: String, status: Status, power_produced: i32, proc_load: String, param_table: String, envoy_serial_number: String, energy: crate::models::InvertersSummaryByEnvoyOrSiteResponseEnergy, grid_profile: String, last_report_date: String) -> InvertersSummaryByEnvoyOrSiteResponseMicroInverters {
        InvertersSummaryByEnvoyOrSiteResponseMicroInverters {
            id,
            model,
            part_number,
            serial_number,
            sku,
            status,
            power_produced,
            proc_load,
            param_table,
            envoy_serial_number,
            energy: Box::new(energy),
            grid_profile,
            last_report_date,
        }
    }
}

/// The current status of this Microinverter. * `normal` - The microinverter is operating normally. * `power` - There is a production issue. * `micro` - The microinverter is not reporting. * `retired` - The microinverter is retired.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "normal")]
    Normal,
    #[serde(rename = "power")]
    Power,
    #[serde(rename = "micro")]
    Micro,
    #[serde(rename = "retired")]
    Retired,
}

