/*
 * The Enlighten Systems API
 *
 * The Enlighten Systems API is a JSON-based API that provides access to performance data for a PV system. By using the Enlighten Systems API, you agree to the Enphase Energy API License Agreement.  Please note that the Enlighten Systems API does not provide performance data at a panel or microinverter level.
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SummaryResponse {
    /// Current power production, in Watts. For historical requests, returns 0.
    #[serde(rename = "current_power")]
    pub current_power: i32,
    /// Energy produced in the lifetime of the system, excluding the requested day, in Watt-hours.
    #[serde(rename = "energy_lifetime")]
    pub energy_lifetime: i32,
    /// Energy produced on the requested day, in Watt-hours.
    #[serde(rename = "energy_today")]
    pub energy_today: i32,
    /// The last known time that the system produced energy. When a system has not been communicating for a length of time, the `last_report_at` can be recent, whereas the `last_interval_end_at` may be further back.
    #[serde(rename = "last_interval_end_at")]
    pub last_interval_end_at: i64,
    /// The last time an Envoy on this system reported. The format is Unix epoch time unless you pass a `datetime_format` parameter as described [here](https://developer.enphase.com/docs#Datetimes).
    #[serde(rename = "last_report_at")]
    pub last_report_at: i64,
    /// Number of active (not retired) modules. For historical requests, returns 0.
    #[serde(rename = "modules")]
    pub modules: i32,
    /// The time at which this system became operational. Corresponds to the system's interconnect time, if one is specified. Otherwise, it is the system's first interval end time. The format is Unix epoch time unless you pass a `datetime_format` parameter as described [here](https://developer.enphase.com/docs#Datetimes).
    #[serde(rename = "operational_at")]
    pub operational_at: i64,
    /// The size of the system, in Watts. For historical requests, returns 0.
    #[serde(rename = "size_w")]
    pub size_w: i32,
    /// Indicates whether the production of this system is measured by its microinverters (`microinverters`) or by revenue-grade meters (`meter`) installed on the system.
    #[serde(rename = "source")]
    pub source: Source,
    #[serde(rename = "status")]
    pub status: crate::models::Status,
    /// Effective date of the response. For historical requests, returns the date requested. For current requests, returns the current date. The format is `YYYY-mm-dd` unless you pass a `datetime_format` parameter as described [here](https://developer.enphase.com/docs#Datetimes).
    #[serde(rename = "summary_date")]
    pub summary_date: String,
    /// The Enlighten ID of the system.
    #[serde(rename = "system_id")]
    pub system_id: i32,
}

impl SummaryResponse {
    pub fn new(current_power: i32, energy_lifetime: i32, energy_today: i32, last_interval_end_at: i64, last_report_at: i64, modules: i32, operational_at: i64, size_w: i32, source: Source, status: crate::models::Status, summary_date: String, system_id: i32) -> SummaryResponse {
        SummaryResponse {
            current_power,
            energy_lifetime,
            energy_today,
            last_interval_end_at,
            last_report_at,
            modules,
            operational_at,
            size_w,
            source,
            status,
            summary_date,
            system_id,
        }
    }
}

/// Indicates whether the production of this system is measured by its microinverters (`microinverters`) or by revenue-grade meters (`meter`) installed on the system.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Source {
    #[serde(rename = "microinverters")]
    Microinverters,
    #[serde(rename = "meter")]
    Meter,
}

